import tkinter as tk
from tkinter import filedialog, messagebox, ttk, simpledialog
import cv2
from PIL import Image, ImageTk
import threading
import os
import time
from tkinter.font import Font

class VideoLooperApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üéûÔ∏è Video Looper")
        self.root.geometry("800x750")
        self.root.configure(bg='#f0f0f0')

        # ƒê·ªãnh nghƒ©a fonts v√† styles
        self.title_font = Font(family="Helvetica", size=16, weight="bold")
        self.button_font = Font(family="Helvetica", size=11)
        self.label_font = Font(family="Helvetica", size=10)
        
        # ƒê·ªãnh nghƒ©a m√†u s·∫Øc
        self.primary_color = '#2196f3'
        self.secondary_color = '#f0f0f0'
        self.accent_color = '#1976d2'

        self.video_path = None
        self.cap = None
        self.frame_rate = 30
        self.frame_count = 0
        self.is_playing = False
        self.play_thread = None
        self.exporting = False

        # Configure style
        style = ttk.Style()
        style.configure('Custom.TButton', 
                       padding=10, 
                       font=self.button_font)
        style.configure('Custom.TFrame', 
                       background=self.secondary_color)
        style.configure('Custom.Horizontal.TProgressbar',
                       background=self.primary_color)

        self.setup_ui()

    def setup_ui(self):
        # Main container v·ªõi padding v√† m√†u n·ªÅn
        main_frame = ttk.Frame(self.root, padding="20", style='Custom.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Title
        title_label = tk.Label(
            main_frame,
            text="Video Looper",
            font=self.title_font,
            bg=self.secondary_color,
            fg=self.primary_color
        )
        title_label.pack(pady=(0, 20))

        # Button frame
        button_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        select_btn = ttk.Button(
            button_frame,
            text="üìÇ Ch·ªçn Video",
            command=self.load_video,
            style='Custom.TButton'
        )
        select_btn.pack(pady=5, padx=20, fill=tk.X)

        # File path label v·ªõi style m·ªõi
        self.label_path = tk.Label(
            main_frame,
            text="Ch∆∞a ch·ªçn video",
            font=self.label_font,
            bg=self.secondary_color,
            fg='#666666'
        )
        self.label_path.pack(pady=(5, 15))

        # Canvas v·ªõi border v√† shadow effect
        canvas_frame = tk.Frame(
            main_frame,
            bg='white',
            bd=1,
            relief=tk.SOLID
        )
        canvas_frame.pack(pady=10, padx=20)
        
        self.canvas = tk.Label(canvas_frame, bg='black')
        self.canvas.pack(padx=2, pady=2)

        # Control buttons v·ªõi layout c·∫£i thi·ªán
        control_frame = ttk.Frame(main_frame, style='Custom.TFrame')
        control_frame.pack(fill=tk.X, pady=20)
        
        # T·∫°o c√°c n√∫t v·ªõi style m·ªõi
        buttons = [
            ("‚ñ∂Ô∏è Xem Loop", self.start_loop),
            ("‚èπÔ∏è D·ª´ng", self.stop_loop),
            ("üíæ Export Video", self.export_loop)
        ]
        
        for text, command in buttons:
            btn = ttk.Button(
                control_frame,
                text=text,
                command=command,
                style='Custom.TButton'
            )
            btn.pack(side=tk.LEFT, padx=10, expand=True)

        # Progress bar v·ªõi style m·ªõi
        self.progress = ttk.Progressbar(
            main_frame,
            mode='determinate',
            style='Custom.Horizontal.TProgressbar'
        )
        self.progress.pack(fill=tk.X, pady=(20, 0), padx=20)

    def load_video(self):
        self.stop_loop()
        self.video_path = filedialog.askopenfilename(
            filetypes=[("Video files", "*.mp4 *.avi *.mov *.mkv *.wmv"), ("All files", "*.*")],
            title="Ch·ªçn video"
        )
        if not self.video_path:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng ch·ªçn video n√†o.")
            return

        if not os.path.isfile(self.video_path):
            messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i: {self.video_path}")
            return

        print(f"ƒê∆∞·ªùng d·∫´n: {self.video_path}")
        print(f"C√°c file trong th∆∞ m·ª•c: {os.listdir(os.path.dirname(self.video_path))}")

        self.label_path.config(text=os.path.basename(self.video_path))
        self.cap = cv2.VideoCapture(self.video_path)

        if not self.cap.isOpened():
            messagebox.showerror("L·ªói", f"Kh√¥ng m·ªü ƒë∆∞·ª£c video:\n{self.video_path}")
            self.cap = None
            return

        self.frame_rate = self.cap.get(cv2.CAP_PROP_FPS)
        self.frame_count = int(self.cap.get(cv2.CAP_PROP_FRAME_COUNT))

        if self.frame_count == 0 or self.frame_rate == 0:
            messagebox.showerror("L·ªói", "Video kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ch·ª©a frame.")
            self.cap.release()
            self.cap = None
            return

        duration = self.frame_count / self.frame_rate
        messagebox.showinfo("Th√¥ng tin", f"Video: {os.path.basename(self.video_path)}\nTh·ªùi l∆∞·ª£ng: {duration:.2f} gi√¢y")

    def start_loop(self):
        if self.is_playing or not self.cap:
            return

        self.is_playing = True
        self.play_thread = threading.Thread(
            target=self.play_loop,
            args=(0, self.frame_count - 1),
            daemon=True
        )
        self.play_thread.start()

    def play_loop(self, start_frame, end_frame):
        while self.is_playing:
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
            for i in range(start_frame, end_frame + 1):
                if not self.is_playing:
                    break
                ret, frame = self.cap.read()
                if not ret:
                    break
                rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(rgb)
                img = img.resize((400, int(400 * frame.shape[0] / frame.shape[1])), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                self.canvas.config(image=photo)
                self.canvas.image = photo
                self.canvas.update()
                time.sleep(1.0 / self.frame_rate)

    def stop_loop(self):
        self.is_playing = False
        if self.play_thread:
            self.play_thread.join()
        self.canvas.config(image='')
        self.canvas.image = None

    def export_loop(self):
        if not self.cap:
            messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn video.")
            return

        if self.exporting:
            messagebox.showinfo("Th√¥ng b√°o", "ƒêang export, vui l√≤ng ch·ªù.")
            return

        loop_minutes = simpledialog.askfloat(
            "Th·ªùi gian l·∫∑p",
            "Nh·∫≠p th·ªùi gian l·∫∑p (ph√∫t):",
            minvalue=0.1
        )
        if not loop_minutes:
            return

        loop_duration = self.frame_count / self.frame_rate
        total_loops = int((loop_minutes * 60) / loop_duration)
        if total_loops < 1:
            messagebox.showerror("L·ªói", "Th·ªùi gian qu√° ng·∫Øn ƒë·ªÉ l·∫∑p.")
            return

        save_path = filedialog.asksaveasfilename(
            defaultextension=".mp4",
            filetypes=[("MP4 files", "*.mp4")],
            title="L∆∞u video loop"
        )
        if not save_path:
            return

        self.exporting = True
        threading.Thread(
            target=self._export_loop,
            args=(0, self.frame_count - 1, total_loops, save_path),
            daemon=True
        ).start()

    def _export_loop(self, start_frame, end_frame, total_loops, save_path):
        self.progress['value'] = 0
        self.progress['maximum'] = total_loops * (end_frame - start_frame + 1)

        h, w = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)), int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(save_path, fourcc, self.frame_rate, (w, h))

        if not out.isOpened():
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫°o file output. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ho·∫∑c quy·ªÅn ghi file.")
            self.exporting = False
            return

        try:
            for loop in range(total_loops):
                self.cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
                for i in range(start_frame, end_frame + 1):
                    ret, frame = self.cap.read()
                    if not ret:
                        messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc frame {i} trong loop {loop + 1}.")
                        out.release()
                        self.exporting = False
                        return
                    out.write(frame)
                    self.progress['value'] += 1
                    self.progress.update()
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi export: {str(e)}")
            out.release()
            self.exporting = False
            return

        out.release()
        self.progress['value'] = 0
        self.exporting = False
        if os.path.getsize(save_path) > 0:
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ xu·∫•t video loop {total_loops} l·∫ßn t·∫°i:\n{save_path}")
        else:
            messagebox.showerror("L·ªói", "File output r·ªóng ho·∫∑c b·ªã h·ªèng.")

    def stop(self):
        self.is_playing = False
        self.exporting = False
        if self.play_thread:
            self.play_thread.join()
        if self.cap:
            self.cap.release()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = VideoLooperApp(root)
    root.protocol("WM_DELETE_WINDOW", app.stop)
    root.mainloop()